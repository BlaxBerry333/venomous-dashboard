// @generated
// This file is @generated by prost-build.
// ====================================================================================================
// Common Types
// ====================================================================================================

#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct ApiError {
    #[prost(string, tag = "1")]
    pub code: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
// ====================================================================================================
// Base User Types
// ====================================================================================================

#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct Role {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "4")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub updated_at: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "6")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct User {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub role_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "5")]
    pub avatar_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, tag = "6")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub updated_at: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "8")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthUser {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub password_hash: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub email_verified: bool,
    #[prost(string, optional, tag = "6")]
    pub last_login: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, tag = "7")]
    pub login_failure_count: i32,
    #[prost(bool, tag = "8")]
    pub is_login_locked: bool,
    #[prost(string, optional, tag = "9")]
    pub deleted_at: ::core::option::Option<::prost::alloc::string::String>,
}
// ====================================================================================================
// Token Types
// ====================================================================================================

#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthToken {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub expires_at: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub issued_at: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthTokenInfo {
    #[prost(bool, tag = "1")]
    pub valid: bool,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub role: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub expires_at: i64,
    #[prost(int64, tag = "7")]
    pub issued_at: i64,
}
// ====================================================================================================
// Authentication API Request/Response Types
// ====================================================================================================

#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthSignupRequest {
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthSignupResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AuthSignupData>,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<ApiError>,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthSignupData {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub user: ::core::option::Option<User>,
    #[prost(string, tag = "3")]
    pub created_at: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthSigninRequest {
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthSigninResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AuthSigninData>,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<ApiError>,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthSigninData {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub user: ::core::option::Option<User>,
    #[prost(string, tag = "3")]
    pub last_login: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthLogoutRequest {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthLogoutResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<ApiError>,
}
// ====================================================================================================
// Token Management API Types
// ====================================================================================================

#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthTokenVerifyRequest {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthTokenVerifyResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AuthTokenInfo>,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<ApiError>,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthTokenInfoRequest {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthTokenInfoResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AuthTokenInfo>,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<ApiError>,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthTokenRefreshRequest {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthTokenRefreshResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<AuthTokenRefreshData>,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<ApiError>,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct AuthTokenRefreshData {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub expires_at: i64,
}
// ====================================================================================================
// User Management API Types
// ====================================================================================================

/// No fields needed - user identified by JWT token
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserGetProfileRequest {}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UserGetProfileResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<User>,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<ApiError>,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UserUpdateProfileRequest {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub avatar_path: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message, serde::Serialize, serde::Deserialize)]
pub struct UserUpdateProfileResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<User>,
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<ApiError>,
}
// @@protoc_insertion_point(module)
